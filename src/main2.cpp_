#include <vector>
#include <iostream>
#include "./../include/LCS.hpp"
int main(int argc, char *argv[])
{
  if (argc < 3)
  {
    std::cout << "Error, n arguments expected, where n >= 2" << std::endl;
    std::cout << "Usage: ./lcs string1 string2 ... stringN" << std::endl;
    std::cout << "Desc: It will find all the longest common subsequences between" << std::endl; 
    std::cout << "every string given, and then output them through the console." << std::endl;
  }
  else 
  {
    LCS lcs(argv[1], argv[2]);
    std::vector<std::string> LCSs = lcs.getLCSs();
    int wordsLeft = argc - 3;
    while (wordsLeft > 0)
    {
      std::vector<std::string> preLCSs = LCSs;
      LCSs.clear();
      for (int i = 0; i < preLCSs.size(); i++)
      {
        lcs.resetFor(preLCSs[i], argv[wordsLeft + 2]);
        std::vector<std::string> tmpToAddLCSs = lcs.getLCSs();
        if (LCSs.size() == 0 || tmpToAddLCSs.size() == 0 || LCSs[0].size() == tmpToAddLCSs[0].size())
        {
          LCSs.insert(LCSs.end(), tmpToAddLCSs.begin(), tmpToAddLCSs.end());
        }
        else if (LCSs[0].size() < tmpToAddLCSs[0].size())
        {
          LCSs = tmpToAddLCSs;
        }
      }
      wordsLeft--;
    }
    for (int i = 0; i < LCSs.size(); i++)
    {
      std::cout << LCSs[i] << std::endl;
    }
  }
  return 0;
}
